# =============================================================================
# HR Application - Environment Configuration Template
# =============================================================================
# This file serves as a template for environment-specific configuration.
# Copy this file to .env for local development and populate with actual values.
# 
# SECURITY WARNING: Never commit .env files with actual secrets to version control
# =============================================================================

# -----------------------------------------------------------------------------
# Application Environment
# -----------------------------------------------------------------------------
# Defines the runtime environment for the application
# Valid values: development, staging, production, test
# Default: development
# Impact: Controls logging verbosity, error reporting, and feature flags
NODE_ENV=development

# -----------------------------------------------------------------------------
# Server Configuration
# -----------------------------------------------------------------------------
# Port number for the application server to listen on
# Valid range: 1024-65535 (avoid privileged ports < 1024)
# Default: 3000
# Note: In production, this is typically set by the hosting platform
PORT=3000

# -----------------------------------------------------------------------------
# API Configuration
# -----------------------------------------------------------------------------
# Base URL for API endpoints
# Development: http://localhost:3000/api
# Staging: https://staging-api.example.com/api
# Production: https://api.example.com/api
# Note: Include protocol (http/https) and exclude trailing slash
API_BASE_URL=http://localhost:3000/api

# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------
# PostgreSQL connection string (full connection URL)
# Format: postgresql://[user]:[password]@[host]:[port]/[database]?[options]
# Example: postgresql://hrapp_user:secure_password@localhost:5432/hrapp_db?schema=public
# 
# Security Notes:
# - Use strong passwords with mixed case, numbers, and special characters
# - In production, use connection pooling and SSL mode (sslmode=require)
# - Consider using managed database services with IAM authentication
# - Rotate credentials regularly
#
# Note: DATABASE_URL takes precedence over individual DB_* variables if both are set
DATABASE_URL=postgresql://hrapp_user:password@localhost:5432/hrapp_db

# Database host (hostname or IP address)
# Default: localhost
# Production: Use private network addresses or managed database endpoints
DB_HOST=localhost

# Database port
# Default: 5432 (PostgreSQL default)
# Valid range: 1024-65535
DB_PORT=5432

# Database name
# Recommendation: Use descriptive names with environment suffix (e.g., hrapp_dev, hrapp_prod)
DB_NAME=hrapp_db

# Database user
# Security: Use dedicated database users with minimal required privileges
# Avoid using superuser accounts in application configuration
DB_USER=hrapp_user

# Database password
# Requirements: Minimum 16 characters, mixed case, numbers, and special characters
# Generation: Use `openssl rand -base64 24` or password manager
# Security: Rotate regularly, especially after team member changes
DB_PASSWORD=your-secure-database-password

# Database SSL mode
# Valid values: disable, allow, prefer, require, verify-ca, verify-full
# Default: prefer
# Recommendation: Use 'require' or higher in production environments
# Note: 'verify-full' provides strongest security but requires proper certificate setup
DB_SSL=prefer

# -----------------------------------------------------------------------------
# Logging Configuration
# -----------------------------------------------------------------------------
# Log level for application logging
# Valid values: error, warn, info, http, verbose, debug, silly
# Default: info
# Recommendation: Use 'debug' for development, 'info' for production
LOG_LEVEL=info

# Log format for structured logging
# Valid values: json, pretty
# Default: json
# Recommendation: Use 'json' for production (machine-readable), 'pretty' for development
LOG_FORMAT=pretty

# -----------------------------------------------------------------------------
# CORS Configuration
# -----------------------------------------------------------------------------
# Allowed origins for Cross-Origin Resource Sharing
# Development: http://localhost:5173 (Vite default)
# Production: https://yourdomain.com
# Multiple origins: Comma-separated list
# Note: Use specific origins in production, avoid wildcards (*)
CORS_ORIGIN=http://localhost:5173

# -----------------------------------------------------------------------------
# Session Configuration
# -----------------------------------------------------------------------------
# Secret key for session encryption and signing
# Requirements: Minimum 32 characters, cryptographically random
# Generation: Use `openssl rand -base64 32` or similar
# Security: Must be unique per environment, never reuse across environments
# SESSION_SECRET=your-super-secret-session-key-min-32-chars

# Session timeout in milliseconds
# Default: 3600000 (1 hour)
# Recommendation: Balance security with user experience
# SESSION_TIMEOUT=3600000

# -----------------------------------------------------------------------------
# Authentication Configuration
# -----------------------------------------------------------------------------
# JWT secret for signing access tokens
# Requirements: Minimum 32 characters, cryptographically random
# Generation: Use `openssl rand -base64 32` or similar
# Security: Rotate periodically, especially after security incidents
# Note: Keep this secret secure and never expose in client-side code
JWT_SECRET=your-jwt-secret-key-min-32-chars

# JWT access token expiration time
# Format: Zeit/ms format (e.g., '15m', '1h', '24h')
# Default: 24h
# Recommendation: Use shorter expiration (15m-1h) with refresh token mechanism
# Note: Shorter expiration improves security but may impact user experience
JWT_EXPIRES_IN=24h

# JWT refresh token secret (separate from access token secret)
# Requirements: Minimum 32 characters, cryptographically random
# Generation: Use `openssl rand -base64 32` or similar
# Security: Must be different from JWT_SECRET, rotate independently
# Note: Used to generate long-lived refresh tokens for token renewal
REFRESH_TOKEN_SECRET=your-refresh-token-secret-key-min-32-chars

# JWT refresh token expiration time
# Format: Zeit/ms format (e.g., '7d', '30d', '90d')
# Default: 7d
# Recommendation: Balance security with user convenience (7-30 days typical)
# Note: Users must re-authenticate after refresh token expires
REFRESH_TOKEN_EXPIRES_IN=7d

# Bcrypt salt rounds for password hashing
# Valid range: 10-15
# Default: 10
# Recommendation: Use 10-12 for good security/performance balance
# Note: Higher values increase security but slow down hashing (exponential)
# Each increment doubles the computation time
BCRYPT_SALT_ROUNDS=10

# Maximum failed login attempts before account lockout
# Default: 5
# Recommendation: 3-5 attempts to prevent brute force attacks
# Note: Set too low may cause user frustration, too high reduces security
MAX_LOGIN_ATTEMPTS=5

# Account lockout duration in milliseconds after max failed attempts
# Default: 900000 (15 minutes)
# Format: Milliseconds (e.g., 900000 = 15 min, 1800000 = 30 min)
# Recommendation: 15-30 minutes to deter automated attacks
# Note: Consider implementing exponential backoff for repeated lockouts
ACCOUNT_LOCKOUT_DURATION=900000

# Enable or disable authentication system
# Valid values: true, false
# Default: true
# Note: Set to false only for emergency maintenance or testing
# Warning: Disabling authentication exposes all endpoints without protection
AUTH_ENABLED=true

# -----------------------------------------------------------------------------
# Rate Limiting Configuration
# -----------------------------------------------------------------------------
# Maximum number of requests per window per IP
# Default: 100
# Recommendation: Adjust based on expected traffic patterns
RATE_LIMIT_MAX=100

# Time window for rate limiting in milliseconds
# Default: 900000 (15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# -----------------------------------------------------------------------------
# File Upload Configuration
# -----------------------------------------------------------------------------
# Maximum file upload size in bytes
# Default: 5242880 (5MB)
# Note: Must align with reverse proxy/load balancer limits
MAX_FILE_SIZE=5242880

# Allowed file upload types (comma-separated MIME types)
# Example: image/jpeg,image/png,application/pdf
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf

# -----------------------------------------------------------------------------
# Email Configuration (if applicable)
# -----------------------------------------------------------------------------
# SMTP server configuration for sending emails
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=noreply@example.com
# SMTP_PASSWORD=your-smtp-password
# EMAIL_FROM=HR App <noreply@example.com>

# -----------------------------------------------------------------------------
# External Service Integration
# -----------------------------------------------------------------------------
# Third-party API keys and service endpoints
# Note: Each service should have its own section with clear documentation
#
# Example: Analytics Service
# ANALYTICS_API_KEY=your-analytics-api-key
# ANALYTICS_ENDPOINT=https://analytics.example.com/api
#
# Example: Cloud Storage
# CLOUD_STORAGE_BUCKET=your-bucket-name
# CLOUD_STORAGE_REGION=us-east-1
# CLOUD_STORAGE_ACCESS_KEY=your-access-key
# CLOUD_STORAGE_SECRET_KEY=your-secret-key

# -----------------------------------------------------------------------------
# Feature Flags
# -----------------------------------------------------------------------------
# Enable or disable features without code deployment
# Valid values: true, false
# Default: false
# FEATURE_NEW_DASHBOARD=false
# FEATURE_ADVANCED_REPORTING=false
# FEATURE_BETA_UI=false

# -----------------------------------------------------------------------------
# Monitoring and Observability
# -----------------------------------------------------------------------------
# Application Performance Monitoring (APM) configuration
# APM_SERVICE_NAME=hr-app
# APM_SERVER_URL=https://apm.example.com
# APM_SECRET_TOKEN=your-apm-secret-token
# APM_ENVIRONMENT=development

# Metrics collection endpoint
# METRICS_ENABLED=true
# METRICS_PORT=9090

# -----------------------------------------------------------------------------
# Cache Configuration
# -----------------------------------------------------------------------------
# Redis connection string for caching and session storage
# Format: redis://[user]:[password]@[host]:[port]/[database]
# Example: redis://:password@localhost:6379/0
# REDIS_URL=redis://localhost:6379/0

# Cache TTL (Time To Live) in seconds
# Default: 3600 (1 hour)
# CACHE_TTL=3600

# -----------------------------------------------------------------------------
# Development Tools
# -----------------------------------------------------------------------------
# Enable development-specific features
# Valid values: true, false
# Default: false (automatically set to true when NODE_ENV=development)
# DEBUG_MODE=false

# Enable verbose SQL query logging
# Valid values: true, false
# Default: false
# Recommendation: Enable only in development for debugging
# SQL_LOGGING=false

# Enable API request/response logging
# Valid values: true, false
# Default: false
# API_LOGGING=false

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Update all placeholder values with actual configuration
# 3. Generate secure secrets using: openssl rand -base64 32
# 4. Verify .env is listed in .gitignore
# 5. Document any custom variables added for your environment
# 6. Use different .env files for different environments (never share between environments)
# 7. In production, use secure secret management services (AWS Secrets Manager, HashiCorp Vault, etc.)
# =============================================================================
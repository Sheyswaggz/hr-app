name: Deploy to Production

# Manual trigger only for production deployments
# Requires explicit approval and authorization
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.3 or commit SHA)'
        required: true
        type: string
      skip_tests:
        description: 'Skip pre-deployment tests (NOT RECOMMENDED)'
        required: false
        default: false
        type: boolean
      rollback_on_failure:
        description: 'Automatically rollback on deployment failure'
        required: false
        default: true
        type: boolean

# Global environment variables
env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1
  DEPLOYMENT_TIMEOUT: 1800  # 30 minutes
  HEALTH_CHECK_RETRIES: 10
  HEALTH_CHECK_INTERVAL: 30

# Prevent concurrent production deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Validate deployment prerequisites
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      commit_sha: ${{ steps.validate.outputs.commit_sha }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version and prerequisites
        id: validate
        run: |
          echo "=== Validating Deployment Prerequisites ==="
          
          VERSION="${{ github.event.inputs.version }}"
          echo "Requested version: $VERSION"
          
          # Validate version format
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Valid semantic version format"
            COMMIT_SHA=$(git rev-list -n 1 "$VERSION" 2>/dev/null || echo "")
            if [ -z "$COMMIT_SHA" ]; then
              echo "::error::Version tag $VERSION does not exist"
              echo "is_valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [[ $VERSION =~ ^[0-9a-f]{40}$ ]]; then
            echo "Valid commit SHA format"
            COMMIT_SHA=$VERSION
            if ! git cat-file -e "$COMMIT_SHA" 2>/dev/null; then
              echo "::error::Commit SHA $COMMIT_SHA does not exist"
              echo "is_valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "::error::Invalid version format. Use semantic version (v1.2.3) or commit SHA"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "is_valid=true" >> $GITHUB_OUTPUT
          
          echo "✓ Version validation successful"
          echo "  Version: $VERSION"
          echo "  Commit SHA: $COMMIT_SHA"

      - name: Check branch protection
        run: |
          echo "=== Checking Branch Protection ==="
          echo "Deployment initiated by: ${{ github.actor }}"
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "Workflow run number: ${{ github.run_number }}"

      - name: Validate deployment window
        run: |
          echo "=== Validating Deployment Window ==="
          
          # Get current day and hour (UTC)
          CURRENT_DAY=$(date -u +%u)  # 1-7 (Monday-Sunday)
          CURRENT_HOUR=$(date -u +%H)
          
          echo "Current time (UTC): $(date -u)"
          echo "Day of week: $CURRENT_DAY"
          echo "Hour: $CURRENT_HOUR"
          
          # Production deployment window: Monday-Thursday, 9 AM - 5 PM UTC
          # Avoid Friday deployments and off-hours
          if [ "$CURRENT_DAY" -eq 5 ] || [ "$CURRENT_DAY" -eq 6 ] || [ "$CURRENT_DAY" -eq 7 ]; then
            echo "::warning::Deploying outside recommended window (Friday-Sunday)"
          fi
          
          if [ "$CURRENT_HOUR" -lt 9 ] || [ "$CURRENT_HOUR" -ge 17 ]; then
            echo "::warning::Deploying outside business hours (9 AM - 5 PM UTC)"
          fi
          
          echo "✓ Deployment window check complete"

  # Checkout and prepare deployment artifacts
  checkout:
    name: Checkout and Prepare
    needs: validate
    if: needs.validate.outputs.is_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.commit_sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          echo "=== Installing Dependencies ==="
          npm ci --prefer-offline --no-audit
          echo "✓ Dependencies installed successfully"

      - name: Verify installation
        run: |
          echo "=== Verifying Installation ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "✓ Installation verified"

  # Run pre-deployment tests
  pre-deployment-tests:
    name: Pre-Deployment Tests
    needs: [validate, checkout]
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.commit_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('package.json') }}

      - name: Wait for PostgreSQL
        run: |
          echo "=== Waiting for PostgreSQL ==="
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✓ PostgreSQL is ready"

      - name: Run database migrations
        run: |
          echo "=== Running Database Migrations ==="
          npm run migrate:up
          echo "✓ Migrations completed successfully"
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: hr_app_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres

      - name: Run unit tests
        run: |
          echo "=== Running Unit Tests ==="
          npm run test -- --testPathPattern="tests/unit"
          echo "✓ Unit tests passed"
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: |
          echo "=== Running Integration Tests ==="
          npm run test -- --testPathPattern="tests/integration"
          echo "✓ Integration tests passed"
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: hr_app_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres

      - name: Run E2E tests
        run: |
          echo "=== Running E2E Tests ==="
          npm run test -- --testPathPattern="tests/e2e"
          echo "✓ E2E tests passed"
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: hr_app_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres

      - name: Test summary
        if: always()
        run: |
          echo "=== Test Execution Summary ==="
          echo "Status: ${{ job.status }}"
          echo "All pre-deployment tests completed"

  # Build production artifacts
  build:
    name: Build Production Artifacts
    needs: [validate, checkout, pre-deployment-tests]
    if: |
      always() &&
      needs.validate.outputs.is_valid == 'true' &&
      (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.commit_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('package.json') }}

      - name: Build application
        run: |
          echo "=== Building Production Application ==="
          npm run build
          echo "✓ Build completed successfully"
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          echo "=== Verifying Build Artifacts ==="
          if [ ! -d "dist" ]; then
            echo "::error::Build directory 'dist' not found"
            exit 1
          fi
          
          echo "Build directory contents:"
          ls -lah dist/ || echo "No dist directory"
          
          echo "Build size:"
          du -sh dist/ || echo "No dist directory"
          
          echo "✓ Build artifacts verified"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ github.run_id }}
          path: |
            dist/
            package.json
            package-lock.json
            migrations/
          retention-days: 30
          if-no-files-found: error

      - name: Build summary
        run: |
          echo "=== Build Summary ==="
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Commit: ${{ needs.validate.outputs.commit_sha }}"
          echo "Build artifacts uploaded successfully"

  # Security scan before deployment
  security-scan:
    name: Security Scan
    needs: [validate, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.commit_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('package.json') }}

      - name: Run npm audit
        run: |
          echo "=== Running Security Audit ==="
          npm audit --audit-level=high --production || true
          npm audit --json --production > audit-report.json || true
          echo "✓ Security audit completed"
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          echo "=== Checking for Critical Vulnerabilities ==="
          
          if [ -f audit-report.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-report.json)
            
            echo "Critical vulnerabilities: $CRITICAL"
            echo "High vulnerabilities: $HIGH"
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo "::error::Critical vulnerabilities found. Deployment blocked."
              exit 1
            fi
            
            if [ "$HIGH" -gt 0 ]; then
              echo "::warning::High severity vulnerabilities found. Review recommended."
            fi
          fi
          
          echo "✓ Security check passed"

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-production-${{ github.run_id }}
          path: audit-report.json
          retention-days: 90

  # Deploy to production with approval
  deploy-production:
    name: Deploy to Production
    needs: [validate, build, security-scan]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://hr-app.example.com
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.commit_sha }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ github.run_id }}
          path: ./

      - name: Create deployment record
        id: deployment
        run: |
          echo "=== Creating Deployment Record ==="
          
          DEPLOYMENT_ID="prod-${{ github.run_id }}-$(date +%s)"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Commit: ${{ needs.validate.outputs.commit_sha }}"
          echo "Initiated by: ${{ github.actor }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: Backup current production state
        id: backup
        run: |
          echo "=== Backing Up Current Production State ==="
          
          # In a real deployment, this would:
          # - Create database backup
          # - Save current configuration
          # - Store current deployment version
          # - Create rollback point
          
          BACKUP_ID="backup-$(date +%s)"
          echo "backup_id=$BACKUP_ID" >> $GITHUB_OUTPUT
          
          echo "Backup ID: $BACKUP_ID"
          echo "✓ Production state backed up successfully"

      - name: Deploy to production
        id: deploy
        run: |
          echo "=== Deploying to Production Environment ==="
          
          # In a real deployment, this would:
          # - Deploy to production servers/containers
          # - Update load balancer configuration
          # - Run database migrations
          # - Update environment variables
          # - Restart services with zero-downtime
          
          # Simulated deployment steps:
          echo "1. Uploading build artifacts..."
          sleep 2
          
          echo "2. Running database migrations..."
          # npm run migrate:up (with production credentials)
          sleep 2
          
          echo "3. Updating application servers..."
          sleep 2
          
          echo "4. Performing rolling restart..."
          sleep 2
          
          echo "5. Updating load balancer..."
          sleep 1
          
          echo "deployment_url=https://hr-app.example.com" >> $GITHUB_OUTPUT
          echo "✓ Deployment completed successfully"
        env:
          DEPLOY_ENV: production
          VERSION: ${{ needs.validate.outputs.version }}

      - name: Wait for deployment stabilization
        run: |
          echo "=== Waiting for Deployment Stabilization ==="
          echo "Waiting 30 seconds for services to stabilize..."
          sleep 30
          echo "✓ Stabilization period complete"

      - name: Run health checks
        id: health_check
        run: |
          echo "=== Running Production Health Checks ==="
          
          HEALTH_URL="https://hr-app.example.com/health"
          MAX_RETRIES=${{ env.HEALTH_CHECK_RETRIES }}
          RETRY_INTERVAL=${{ env.HEALTH_CHECK_INTERVAL }}
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i/$MAX_RETRIES..."
            
            # In production, this would be a real HTTP request
            # HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")
            
            # Simulated health check
            HTTP_CODE=200
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✓ Health check passed (HTTP $HTTP_CODE)"
              echo "health_status=healthy" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "Health check failed (HTTP $HTTP_CODE), retrying in ${RETRY_INTERVAL}s..."
            sleep $RETRY_INTERVAL
          done
          
          echo "::error::Health checks failed after $MAX_RETRIES attempts"
          echo "health_status=unhealthy" >> $GITHUB_OUTPUT
          exit 1

      - name: Run smoke tests
        if: steps.health_check.outputs.health_status == 'healthy'
        run: |
          echo "=== Running Production Smoke Tests ==="
          
          # In production, this would run critical path tests:
          # - User authentication
          # - Database connectivity
          # - API endpoints
          # - External service integrations
          
          echo "1. Testing authentication endpoint..."
          sleep 1
          
          echo "2. Testing database connectivity..."
          sleep 1
          
          echo "3. Testing critical API endpoints..."
          sleep 1
          
          echo "4. Verifying external integrations..."
          sleep 1
          
          echo "✓ All smoke tests passed"

      - name: Deployment summary
        if: success()
        run: |
          echo "=== Deployment Summary ==="
          echo ""
          echo "✓ DEPLOYMENT SUCCESSFUL"
          echo ""
          echo "Details:"
          echo "  Version: ${{ needs.validate.outputs.version }}"
          echo "  Commit: ${{ needs.validate.outputs.commit_sha }}"
          echo "  Environment: production"
          echo "  URL: ${{ steps.deploy.outputs.deployment_url }}"
          echo "  Deployment ID: ${{ steps.deployment.outputs.deployment_id }}"
          echo "  Backup ID: ${{ steps.backup.outputs.backup_id }}"
          echo "  Deployed by: ${{ github.actor }}"
          echo "  Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "Health Status: ${{ steps.health_check.outputs.health_status }}"

  # Rollback capability
  rollback:
    name: Rollback Deployment
    needs: [validate, deploy-production]
    if: |
      always() &&
      failure() &&
      github.event.inputs.rollback_on_failure == 'true'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute rollback
        run: |
          echo "=== EXECUTING EMERGENCY ROLLBACK ==="
          echo ""
          echo "⚠️  Deployment failed, initiating automatic rollback"
          echo ""
          
          # In production, this would:
          # - Restore previous deployment version
          # - Rollback database migrations
          # - Restore previous configuration
          # - Update load balancer
          # - Restart services
          
          echo "1. Stopping failed deployment..."
          sleep 2
          
          echo "2. Restoring previous version..."
          sleep 2
          
          echo "3. Rolling back database migrations..."
          sleep 2
          
          echo "4. Updating load balancer..."
          sleep 1
          
          echo "5. Restarting services..."
          sleep 2
          
          echo ""
          echo "✓ Rollback completed successfully"
          echo ""
          echo "Previous stable version restored"

      - name: Verify rollback health
        run: |
          echo "=== Verifying Rollback Health ==="
          
          # Run health checks on rolled-back version
          sleep 5
          
          echo "✓ Rolled-back version is healthy"

      - name: Rollback notification
        run: |
          echo "=== Rollback Notification ==="
          echo ""
          echo "⚠️  PRODUCTION DEPLOYMENT ROLLED BACK"
          echo ""
          echo "Failed deployment: ${{ needs.validate.outputs.version }}"
          echo "Rollback initiated by: automatic (on failure)"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "Action required: Investigate deployment failure"

  # Post-deployment verification
  post-deployment:
    name: Post-Deployment Verification
    needs: [validate, deploy-production]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run extended health checks
        run: |
          echo "=== Running Extended Health Checks ==="
          
          # Extended monitoring for 5 minutes
          echo "Monitoring production for 5 minutes..."
          
          for i in {1..10}; do
            echo "Check $i/10 - $(date -u +"%H:%M:%S")"
            # In production: curl health endpoint, check metrics
            sleep 30
          done
          
          echo "✓ Extended health checks passed"

      - name: Update deployment status
        run: |
          echo "=== Updating Deployment Status ==="
          
          # In production, this would:
          # - Update deployment tracking system
          # - Send notifications to team
          # - Update status page
          # - Log to audit system
          
          echo "Deployment status: SUCCESS"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Environment: production"

      - name: Cleanup old artifacts
        run: |
          echo "=== Cleaning Up Old Artifacts ==="
          
          # In production, this would:
          # - Remove old build artifacts
          # - Clean up temporary files
          # - Archive old backups
          
          echo "✓ Cleanup completed"

      - name: Final deployment report
        run: |
          echo "=== Final Deployment Report ==="
          echo ""
          echo "╔════════════════════════════════════════════════════════╗"
          echo "║     PRODUCTION DEPLOYMENT COMPLETED SUCCESSFULLY       ║"
          echo "╚════════════════════════════════════════════════════════╝"
          echo ""
          echo "Deployment Details:"
          echo "  Version: ${{ needs.validate.outputs.version }}"
          echo "  Commit: ${{ needs.validate.outputs.commit_sha }}"
          echo "  Environment: production"
          echo "  Deployed by: ${{ github.actor }}"
          echo "  Workflow: ${{ github.workflow }}"
          echo "  Run ID: ${{ github.run_id }}"
          echo "  Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "Verification:"
          echo "  ✓ Pre-deployment tests passed"
          echo "  ✓ Security scan passed"
          echo "  ✓ Build successful"
          echo "  ✓ Deployment successful"
          echo "  ✓ Health checks passed"
          echo "  ✓ Smoke tests passed"
          echo "  ✓ Extended monitoring passed"
          echo ""
          echo "Production URL: https://hr-app.example.com"
          echo ""
          echo "Next steps:"
          echo "  1. Monitor application metrics"
          echo "  2. Review deployment logs"
          echo "  3. Verify user-facing functionality"
          echo "  4. Update documentation if needed"
          echo ""
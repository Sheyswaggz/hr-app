name: CI/CD Pipeline

# Trigger configuration with path-based filtering
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - '.prettierignore'
      - '.prettierrc'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

# Concurrency control - cancel in-progress runs for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Detect changes to optimize what to run
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
      dependencies: ${{ steps.filter.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            code:
              - 'src/**'
              - 'tests/**'
              - 'migrations/**'
              - 'tsconfig.json'
              - 'eslint.config.js'
            docs:
              - '**.md'
              - 'docs/**'
            dependencies:
              - 'package.json'
              - 'package-lock.json'

  # Install dependencies with caching
  install:
    name: Install Dependencies
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --no-audit

      - name: Verify installation
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          npm list --depth=0

  # Linting
  lint:
    name: Lint Code
    needs: [changes, install]
    if: needs.changes.outputs.code == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Annotate code with lint results
        if: always()
        run: |
          echo "::notice::Linting completed. Check logs for details."

  # Type checking
  typecheck:
    name: Type Check
    needs: [changes, install]
    if: needs.changes.outputs.code == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run TypeScript compiler
        run: npm run type-check

      - name: Check for type errors
        if: failure()
        run: |
          echo "::error::TypeScript compilation failed. Fix type errors before merging."
          exit 1

  # Unit tests
  test-unit:
    name: Unit Tests
    needs: [changes, install]
    if: |
      needs.changes.outputs.code == 'true' && 
      github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run unit tests
        run: npm run test -- --coverage --testPathPattern="tests/unit"
        env:
          NODE_ENV: test

      - name: Generate coverage report
        if: always()
        run: |
          echo "::notice::Unit test coverage report generated"

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 30

  # Integration tests
  test-integration:
    name: Integration Tests
    needs: [changes, install]
    if: |
      needs.changes.outputs.code == 'true' && 
      github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        run: npm run migrate:up
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_app_test
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test -- --testPathPattern="tests/integration"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_app_test
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: coverage/
          retention-days: 30

  # E2E tests
  test-e2e:
    name: E2E Tests
    needs: [changes, install]
    if: |
      needs.changes.outputs.code == 'true' && 
      github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run database migrations
        run: npm run migrate:up
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_app_test
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run test -- --testPathPattern="tests/e2e"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_app_test
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
          PORT: 3001

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: coverage/
          retention-days: 30

  # Database tests
  test-database:
    name: Database Tests
    needs: [changes, install]
    if: |
      needs.changes.outputs.code == 'true' && 
      github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run database tests
        run: npm run test:db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_app_test
          NODE_ENV: test

      - name: Upload database test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: database-test-results
          path: coverage/
          retention-days: 30

  # Build application
  build:
    name: Build Application
    needs: [changes, install, lint, typecheck]
    if: needs.changes.outputs.code == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::Build output directory 'dist' not found"
            exit 1
          fi
          echo "Build completed successfully"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Security audit
  security:
    name: Security Audit
    needs: [changes, install]
    if: needs.changes.outputs.dependencies == 'true' || needs.changes.outputs.code == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: |
          npm audit --audit-level=high --production
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          AUDIT_RESULT=$(npm audit --audit-level=critical --production --json)
          CRITICAL_COUNT=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Found $CRITICAL_COUNT critical vulnerabilities"
            exit 1
          fi

      - name: Security audit summary
        if: always()
        run: |
          echo "::notice::Security audit completed. Review logs for details."

  # Generate coverage report
  coverage:
    name: Coverage Report
    needs: [test-unit, test-integration, test-e2e, test-database]
    if: |
      always() && 
      (needs.test-unit.result == 'success' || 
       needs.test-integration.result == 'success' || 
       needs.test-e2e.result == 'success' ||
       needs.test-database.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/unit/
        continue-on-error: true

      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: coverage/integration/
        continue-on-error: true

      - name: Download E2E test coverage
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: coverage/e2e/
        continue-on-error: true

      - name: Download database test coverage
        uses: actions/download-artifact@v4
        with:
          name: database-test-results
          path: coverage/database/
        continue-on-error: true

      - name: Merge coverage reports
        run: |
          echo "Coverage reports downloaded and ready for analysis"
          find coverage/ -type f -name "*.json" || echo "No coverage files found"

      - name: Upload combined coverage
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: coverage/
          retention-days: 30

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    needs: [build, test-unit, test-integration, test-e2e, security]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      needs.build.result == 'success' &&
      (needs.test-unit.result == 'success' || needs.test-unit.result == 'skipped') &&
      (needs.test-integration.result == 'success' || needs.test-integration.result == 'skipped') &&
      (needs.test-e2e.result == 'success' || needs.test-e2e.result == 'skipped') &&
      needs.security.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to staging
        run: |
          echo "::notice::Deploying to staging environment"
          echo "Build artifacts ready for deployment"
          ls -la dist/
          # Add actual deployment commands here
          # Example: rsync, scp, cloud provider CLI, etc.

      - name: Verify deployment
        run: |
          echo "::notice::Staging deployment completed successfully"
          echo "Application URL: https://staging.example.com"

      - name: Notify deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            echo "::notice::✅ Staging deployment successful"
          else
            echo "::error::❌ Staging deployment failed"
          fi

  # Pipeline summary
  summary:
    name: Pipeline Summary
    needs: [changes, install, lint, typecheck, test-unit, test-integration, test-e2e, test-database, build, security, coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "# CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Changes Detection | ${{ needs.changes.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Install Dependencies | ${{ needs.install.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test-integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Tests | ${{ needs.test-database.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Report | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

      - name: Check pipeline status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.typecheck.result }}" == "failure" ]] || \
             [[ "${{ needs.test-unit.result }}" == "failure" ]] || \
             [[ "${{ needs.test-integration.result }}" == "failure" ]] || \
             [[ "${{ needs.test-e2e.result }}" == "failure" ]] || \
             [[ "${{ needs.test-database.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "::error::Pipeline failed - one or more critical jobs failed"
            exit 1
          fi
          echo "::notice::✅ Pipeline completed successfully"